# SQL ? #
 RDB는 표준질의문(SQL)이라는 걸로 작동되게 설계되어있다. 
 어떤 DB를 사용하던 RDB라면 작업시키는 명령문이 크게 다르지 않다.
# RDB 작업 SQL #
 → DB를 이용해서 데이터를 관리하기 위해선, 테이블(데이터저장소)이라는걸 설계해야 한다.
 어떤 데이터들을 저장할껀지 타입을 멀로 처리할껀지 결정하는 작업이다.

※ 테이블 정의 명령어  (DDL)
  - 기존에 만들어두었던 야구게임의 결과를 DB를 이용해서 저장하려고 함
  create table baseresult(
     player  varchar2(30),   -- 유저명
     tried   number(2, 0),   -- 시도회수
     elapsed number(7, 2),   -- 걸린시간 (초로) : 61.24 
     logdate date            -- 플레이한 날짜
  );

  -- varchar2 가 문자저장 type / ()안은 사이즈/ 최대 4000 / 영문2 한글3
  -- number 숫자저장(정수 or 실수) type / ()안은 자리수 /  
      예)  number(5, 2) : XXX.XX ,  (1, 0) : X
  -- date 시간저장 type / () 설정이 없음.

  desc 테이블명; (테이블 구조 확인)

※ 데이터 조작 명령어 (DML)
   C - 테이블에 데이터를 생성시키는 명령어 (데이터저장시 사용되는)
     #1) insert into 테이블명 values(데이터,데이터,데이터,,) : 컬럼순서대로 설정되서 들어감.
     #2) insert into 테이블명(컬럼,컬럼,컬럼)  values(데이터,데이터,데이터) : 설정한 컬럼대로 들어감.

     ※ 데이터 표기법.
      (문자 데이터는 '' 로 / 수치형 데이터는 그냥표기 / Date형 데이터는 표기할수 없고 함수를 써야 됨)
     ※ to_date 
        to_date 함수는 문자데이터를 date 타입으로 변환하는 oracle 내장 함수로,
        to_date(char, format) :
  
   
    ? insert example  ?
     : insert into baseresult values('모킹', 4, 6.23, to_date('2018-08-27','YYYY-MM-DD')  ); -- SUCCESS

     ※ 컬럼지정없이 values로 insert 시키는건 차례도 맞아야되고, 각 컬럼에 설정할 데이터를 다 기입해야 한다.
       insert into baseresult values(4, '모킹', 6.23, to_date('2018-08-27','YYYY-MM-DD')  ); -- error
       insert into baseresult values('모킹', 4, 6.23); -- error
         
     : insert into baseresult(player, tried, elapsed) values('해적왕', 5, 7.1243);  -- SUCCESS
     ※ 컬럼지정하면 지정한 것들만 데이터가 선택되서 들어가게 된다, 설정되지 않은 컬럼은 null 로 설정된다.
       소수점에 한해선, insert 과정에서 알아서 버려진다.
     
     ※ 문자형 데이터로 설정해도 각 컬럼에 맞게 자동 변환이 일어나게 되있다.  
       (date 형 같은 경우는 기본 포맷이 YYYY-MM-DD 로 설정되있다.)
      : insert into baseresult values('검은발', '5', '7.1243', '2018-08-27');  -- SUCCESS
      - insert into baseresult values('저격왕', '6', '7.4243', '08/27/2018');  -- ERROR
      : insert into baseresult values('저격왕', '6', '7.4243', to_date('08/27/2018','MM/DD/YYYY'));  -- SUCCESS
   R -
     select 컬럼(=키)들 from 테이블명  / select * from 테이블명
     ex)
         select user, logdate from baseresult;    
         select * from baseresult;  
     + filter (조건)
       명령문 뒤에 where 를 붙여서 설정하면 됨.
      ( = , != , > , >=, <, <= , between, in,  is null, is not null, like , / and, or,  (not) )
     ＊ 동등 비교
     → select * from baseresult where tried = 1;
     → select * from baseresult where player != '이세영';
     → select * from baseresult where tried in (2,4,6);

     ＊ 크기 비교 
     → select * from baseresult where elapsed <= 10.0;
     → select * from baseresult where logdate < to_date('2018-09-01', 'YYYY-MM-DD');
     → select * from baseresult where logdate < to_date('2018-09-01', 'YYYY-MM-DD');
     → select * from baseresult where tried between 1 and 5;
     → select * from baseresult where logdate 
            between to_date('2018-08-27', 'YYYY-MM-DD') and to_date('2018-09-02', 'YYYY-MM-DD');

     ＊ null 비교 
      → select * from baseresult where logdate = null; (X)
      → select * from baseresult where logdate is null; (O)            

     ＊ like 패턴유사 검색 ( _ 반드시있어야 되고 or % 없어도 됨 : 문자데이터에 주로 처리)
      → select * from baseresult where player like '___';
      → select * from baseresult where player like '_루_';          
      → select * from baseresult where player like '이%';   이~
      → select * from baseresult where player like '%토';   ~토
      → select * from baseresult where player like '%이%';   ~이~

     ＊ and / or (not)를 이용해서 조건 여러개를 처리 혹은 부정할수 있다.
      → select * from baseresult where elapsed <=7.0 and tried <=2;
      → select * from baseresult where logdate 
            between to_date('2018-08-27', 'YYYY-MM-DD') and to_date('2018-09-02', 'YYYY-MM-DD')  and tried=1; 
       (!between 조건은 and로 설정할수 있다.)
         select * from baseresult where tried between 1 and 5;
        ≒ select * from baseresult where tried >=1 and tried <= 5;
      → select * from baseresult where tried <=1 or elapsed <=10.0;
       (!in 조건은 or 로 설정할수 있다.)
      → select * from baseresult where not (tried between 1 and 5);      

     + sort (정렬)
     필터링 이후에 작동되는 부분으로 데이터가 추출된 이후 정렬시켜서 데이터 확보하고자 할때 설정.
     order by (컬럼 (asc|desc) ) +
     → select * from baseresult order by tried asc; 
     → select * from baseresult order by tried asc, elapsed asc; 
     → select * from baseresult where tried=1 order by elapsed asc;


   U -
   D - 




※ 데이터 제어 명령어 (DCL) 
  CRUD 작업은 실제 테이블에 바로 반영이 되는게 아니라, 한것처럼만 데이터를 보여줌.
  commit; -- 진행했던 CRUD 작업을 반영
  rollback;  -- 최종 commit 지점으로 다시 리셋.

=============================================================

# 테이블에 제약조건 설정 #
- RDB는 기본적으로 테이블에 제약조건을 설정할수 있는데 , 크게 4가지 분류가 있다.
  
  	promary key : 키로 사용할 컬럼 지정
 	- 특정컬럼을 PK 설정하면 , 그 컬럼에는 null 을 허용하지않고 , 같은
	  데이터가 안들어가지면서 유일성을 보장한다.

 	unique : 유일 처리한 컬럼 지정
	- PK와 다른점은 null을 허용함

	check : 데이터 설정 조건

	+ foreign key : 단일 테이블이 아니라 , 여러개의 테이블에 관계를 맺고자 할때 지정

	기존의 테이블을 버리고 , drop table kaseresult;	
	다시 제약조건을 설정해서 테이블을 만들어보자.
	PK 컬럼은 number로 설정해서 숫자 , 문자를 설정하고, 고유 문자열을 저장한다.	


	create table baseresult(
   	     serial varchar2(20),  -- 고유키
	     player  varchar2(30),   -- 유저명
	     tried   number(2, 0),   -- 시도회수
	     elapsed number(7, 2),   -- 걸린시간 (초로) : 61.24 
	     logdate date            -- 플레이한 날짜
	
	    constraint baserule_1 primary key(serial),
	    constraint baserule_2 check (tried>=1)
	    constraint baserule_3 check (player is not null)
	  );

 














